
#region ejercicio1
function estaMarcadoHacia(dir, colorEquipo){
    /*
    proposito: retorna verdadero si hay un rival de colorEquipo en la celda en direccion dir.
    precondicion: el cabezal debe estar situado en una celda con un jugador de colorEquipo
     */
    Mover(dir);
    return (hayBolitas(colorRival(colorEquipo)))
}

function colorRival(colorEquipo){
    /*
    proposito: denota el color del rival del equipo de color colorEquipo
    precondicion: -
     */
    colorDelRival := minColor();
    if(colorEquipo == colorEquipoLocal()){
        colorDelRival := colorEquipoLocal();
    }
    else{
        colorDelRival := colorEquipoVisitante();
    }
    return (colorDelRival)
}
#endregion

#region ejercicio2

function marcado(colorEquipo){
    /*
    proposito: retorna verdadero si hay un rival en alguna de las celdas lindantes a la actual.
    precondicion: -
     */
    dirPrimaria := minDir();
    while(dirPrimaria != maxDir() && not estaMarcadoHacia(dirPrimaria, colorEquipo)){
        dirPrimaria := siguiente(dirPrimaria);
    }
    return (hayRivalHacia(dirPrimaria, colorEquipo))
}
#endregion

#region ejercicio3
 function hayPase(dir, colorEquipo){
     /*
     proposito: denota verdadero si hay un jugador del equipor colorEquipo en direccion dir sin ningun adversario de por medio.
     */
    hayPaseBool := false;
    while(puedeMover(dir) && not hayRivalHacia(dir, colorEquipo)){
        hayPaseBool := elseIf(hayJugadorEquipo(colorEquipo), true, false)
        Mover(dir);
    }
    return (hayPaseBool)
 }

 function elseIf(boleano, param1, param2){
     /*
     proposito: denota param1 si boleano es igual a true.
     precondicion: los parametros 1 y 2 deben ser del mismo tipo y el parametro boleano debe ser de tipo bool
      */
     argumento := param2;
     if(boleano){
         argumento := param1;
     }
     return (argumento)
 }
#endregion

#region ejercicio4
/*

 */
function mejorDirParaPase(colorEquipo){
    dirMejorPase := minDir();
    maxPase := 0;
    foreach dir [dirMin()..maxDir()]{
        if(hayPase(dir, colorEquipo) && maxPase < queTanBuenoEsElPase(dir, colorEquipo)){
            maxPase := queTanBuenoEsElPase(dir, colorEquipo);
            dirMejorPase := dir;
        }
    }
    return (dirMejorPase)
}

function queTanBuenoEsElPase(dir, colorEquipo){
    contarPasos := 0;
    while(not hayJugadorEquipo(colorEquipo)){
        contarPasos := contarPasos + 1;
    }
    if(jugardorEstaUsado()){
        contarPasos := 0;
    }
    return (contarPasos)
}
#endregion

#region ejercicio5
function puedeMeterGol(colorEquipo){
    while(hayPase(colorEquipo) && not hayGol(colorEquipo)){
        RealizarPase(mejorDirParaPase(colorEquipo));
    }
    return (hayGol(colorEquipo))
}

function cantidadPasosPase(dir, colorEquipo){
    cantidadPasos := 0;
    while(not hayJugadorEquipo(colorEquipo)){
        cantidadPasos := cantidadPasos + 1;
        Mover(dir);
    }
    return (cantidadPasos)
}

procedure RealizarPase(dir){
    repeat(cantidadPasosPase(mejorDirParaPase(colorEquipo), colorEquipo)){
        Mover(dir);
    }
}
#endregion