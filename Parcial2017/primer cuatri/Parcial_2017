#region ejercicio1
function esMarcaSinVisitar(){
    /*
    proposito: devuelve verdadero si la celda actual no fue visitada anteriormente
    precondicion: -
     */
    return (not esCeldaVisitada())
}
#endregion

#region ejercicio2
/*
proposito: cuentadenota la cantidad de pasos que debe dar el robot hasta la siguiente marca
precondicion: hay una marca sin visitar en direccion dir
*/
function cantidadDePasosEntreMarcas(dir){
    cantidadPasos := 0;
    while(puedeMover(dir) && not hayMarca()){
        cantidadPasos := cantidadPasos + 1;
        Mover(dir);
    }
    return (cantidadPasos)
}
#endregion

#region ejercicio3
/*
proposito: denota verdadero si la cantidad de energia es suficiente para realizar los pasos del robot
y si la celda actual no fue visitada anteriormente
precondicion: -
*/
function hayMarcaSinVisitarHacia(cantEnergia, dir){
    return (cantidadDePasosEntreMarcas(dir) <= cantEnergia && esMarcaSinVisitar())
}
#endregion

#region ejercicio4
/*
    proposito: denota true si la direccion y la energia son suficientes.
    precondicion: no hay
*/
function hayMarcaSinVisitarEnEntorno(energia){
    dir := mindDir();
    while (dir != maxDir() && not hayMarcaSinVisitarHacia(energia, dir)){
        dir := siguiente(dir);
    }
    return (hayMarcaSinVisitarHacia(energia, dir))
}
#endregion

#region ejercicio5
/*
proposito: mueve el cabezal cantidad de pasos haya entre 2 marcas
-precondicion: debe poder mover hacia la direccion
*/
procedure AvanzarASiguienteMarca(dirMarca){
    repeat(cantidadDePasosEntreMarcas(dirMarca)){
        Mover(dirMarca);
    }
}
#endregion

#region ejercicio6
/*
    proposito: denota verdadero si el robot puede alcanzar la salida con la energia suficiente.
    precondicion: debe haber marcas a seguir y una salida
*/
function escapeExitoso(energiaDisponible){
    energiaRestante := energiaDisponible;
    while(not esSalida()){
        dirMarca := direccionMarcaSinVisitarEnEntorno(energiaRestante);
        energiaRestante :=  energiaRestante - cantidadDePasosEntreMarcas(dirMarca);
        AvanzarASiguienteMarca(dirMarca);
    }
    return (energiaDisponible >= energiaRestante)
}

function direccionMarcaSinVisitarEnEntorno(energia){
/*proposito: retorna la direccion hacia la cual hay marca sin visitar, siempre y cuando alcance la energia */
    dir := mindDir();
    while (dir != maxDir() && not hayMarcaSinVisitarHacia(energia, dir)){
        dir := siguiente(dir);
    }
    return (dir)
}
#endregion

#region ejercicio7
procedure completarRecargas(){
/*
proposito: coloca las baterias necesitas en lugares vacios alrededor de una bateria.
precondicion: -
*/
    InicializarRecorrdio(Norte, Este);
    while(puedoMoverHacia(Norte, Este)){
        colocarBaterias();
        IrAProximaCelda();
    }
}

procedure InicializarRecorrdio(dirPrincipal, dirSecundaria){
    IrABorde(opuesto(dirPrincipal));
    IrABorde(opuesto(dirSecundaria));
}
 
function puedeMoverHacia(dirPrincipal, dirSecundaria){
    return (puedeMover(dirPrincipal) || puedeMover(dirSecundaria))
}

procedure IrAProximaCelda(dirPrincipal, dirSecundaria){
    if(puedeMover(dirPrincipal)){
        Mover(dirPrincipal);
    }
    else{
        Mover(dirSecundaria);
        IrABorde(opuesto(dirPrincipal));
    }
}

procedur IrABorde(dir){
    while(puedeMover(dir)){
        Mover(dir);
    }
}
procedure colocarBaterias(){
    /*
    proposito: coloca una bateria alrededor de la celda actual, exactamente aun rango de 1 celda de distancia si la celda esta vacia.
     */
    foreach direccion in [dirMin()..dirMax()]{
        Mover(direccion);
        SiEsVaciaPonerBateria();
        MoverAdyacente(direccion);
        SiEsVaciaPonerBateria();
        RetornarOrigen(direccion);
    }
}

procedure RetornarOrigen(dir){
    /*
    proposito: mueve el cabezal dos posiciones en retorno a la celda de partida
     */
    Mover(opuesto(siguente(dir)));
    Mover(opuesto(dir));
}

procedure MoverAdyacente(dir){
    /*
    proposito: pone el cabezal en celda diagonal a la celda de partida
     */
    Mover(siguente(dir);)
}

procedure SiEsVaciaPonerBateria(){
    /*
    proposito: pone una bateria si la celda esta vacia
     */
        if(esVacia()){
            Poner(Azul);
        }
}

function esVacia(){
    /*
    proposito: retorna verdadero si la celda actual no contiene ninguna bolita de color.
     */
    return (not hayBolitas(Verde) && not hayBolitas(Rojo) && not hayBolitas(Negro) && not hayBolitas(Azul))
}
#endregion